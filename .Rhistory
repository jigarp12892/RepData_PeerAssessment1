summary(out)
P <- c(-1,+1,-1,+1,-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,-1,-1,+1,+1,0)
D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(15,5,16,4,15,5,16,4,12)
out <- lm(y~P*S*D)
outquad <- lm (y ~ P + I(P^2) )
summary(outquad)
P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8)
out <- lm(y~P*S*D)
outquad <- lm (y ~ P + I(P^2) )
summary(out)
P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8)
out <- lm(y~P*S)
outquad <- lm (y ~ P + I(P^2) )
summary(out)
#P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0,+2)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8)
out <- lm(y~S)
outquad <- lm (y ~ P + I(P^2) )
summary(out)
#P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0,+2)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8)
out <- lm(y~S)
outquad <- lm (y ~ P + I(P^2) )
summary(out)
#P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0,+2)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8,20)
out <- lm(y~S)
outquad <- lm (y ~ P + I(P^2) )
summary(out)
#P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0,+2)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8,20)
#out <- lm(y~S)
outquad <- lm (y ~ S + I(S^2) )
summary(outquad)
P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8)
out <- lm(y~P*S)
outquad <- lm (y ~ S + I(S^2) )
summary(out)
#P <- c(-1,+1,-1,+1,0)
S <- c(-1,-1,+1,+1,0,+2)
#D <- c(-1,-1,-1,-1,+1,+1,+1,+1,+1)
y <-c(4,5,12,13,8,20)
out <- lm(y~S)
outquad <- lm (y ~ S + I(S^2) )
summary(out)
summary(outquad)
library(pid)
help("manufacture")
manufacture(P=0.75, T=325)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("pid")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
install.packages(c("bindrcpp", "bit", "blob", "caTools", "chron", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "ggplot2", "glue", "gtools", "highr", "igraph", "mime", "munsell", "NLP", "openssl", "pillar", "pkgconfig", "plogr", "plotrix", "purrr", "qdap", "R6", "Rcpp", "RCurl", "rJava", "rlang", "rmarkdown", "RSQLite", "scales", "slam", "stringdist", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "tm", "utf8", "withr", "wordcloud", "xlsx", "XML", "yaml"))
rm(list = ls())   # clear the workspace of all prior variables
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(407, 193, 468, 310, 571)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
# You will need the PID package to run this code.
# Run the following command once, then you can comment this out again
install.packages("pid")
# Load the PID package in R.
library(pid)
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "P", "T")
# predict the points, using the model:
predict(mod.base.1, data.frame(P=P, T=T))
# Second factorial: points 4, 5, 6, 7 and 8 (baseline)
# ----------------
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(657, 571, 669, 620, 710)
mod.base.2 <- lm(y ~ P*T)
summary(mod.base.2)
contourPlot(mod.base.2, "P", "T")
# Predict directly from least squares model, for experiment 9
predict(mod.base.2, data.frame(T=0.75, P=1.5))
# Step further, out to point number 10
P_coded = (1.63 - 1.18)/(0.5*0.36)
T_coded = (339 - 334)/(0.5*8)
predict(mod.base.2, data.frame(P=P_coded, T=T_coded))
# Third factorial: around baseline of point 10; cp(1.63, 339) and range(0.36, 6)
# Add runs 11, 12, 13, and 14 around the baseline [video 5F uses this code]
P <- c(  0,  -1,  +1,  -1,  +1)
# Third factorial: around baseline of point 10; cp(1.63, 339) and range(0.36, 6)
# Add runs 11, 12, 13, and 14 around the baseline [video 5F uses this code]
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(732, 715, 713, 733, 725)
mod.base.3 <- lm(y ~ P*T)
summary(mod.base.3)
contourPlot(mod.base.3, "P", "T", main="Regular design")
# Use only point 9 (and not run point 11): points 9, 10, 12, 13, and 14
# This could also have been considered a "botched design".
P <- c(  0,   -1,  +1,  -1,  +1)
T <- c(  0, -2/3,  -1,  +1,  +1)
y <- c(732,  717, 713, 733, 725)
mod.base.4 <- lm(y ~ P*T)
summary(mod.base.4)
contourPlot(mod.base.4, "P", "T",
main="Botched design (with run 9, instead of 11)")
# You may absolutely include point 9, into the rest of the factorial
# to gain an extra degree of freedom.
P <- c(  0,  -1,  +1,  -1,  +1,  -1)
T <- c(  0,  -1,  -1,  +1,  +1,-2/3)
rm(list = ls())   # clear the workspace of all prior variables
P <- c(  0,  -1,  +1,  -1,  +1)
T <- c(  0,  -1,  -1,  +1,  +1)
y <- c(275,301,280,270,255)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
rm(list = ls())   # clear the workspace of all prior variables
P <- c(   -1,  +1,  -1,  +1,0)
T <- c(   -1,  -1,  +1,  +1,0)
y <- c(400,460,425,425,500,430)
mod.base.1 <- lm(y ~ P*T)
rm(list = ls())   # clear the workspace of all prior variables
P <- c(   -1,  +1,  -1,  +1,0)
T <- c(   -1,  -1,  +1,  +1,0)
y <- c(400,460,425,500,430)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "P", "T")
rm(list = ls())   # clear the workspace of all prior variables
P <- c(   -1,  +1,  -1,  +1,0)
T <- c(   -1,  -1,  +1,  +1,0)
y <- c(200,150,120,100,140)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
# You will need the PID package to run this code.
# Run the following command once, then you can comment this out again
#install.packages("pid")
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "P", "T")
rm(list = ls())   # clear the workspace of all prior variables
P <- c(   -1,  +1,  -1,  +1)
T <- c(   -1,  -1,  +1,  +1)
y <- c(12,5,13,6)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
# You will need the PID package to run this code.
# Run the following command once, then you can comment this out again
#install.packages("pid")
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "P", "T")
A <- c(-1,+1,-1,+1)
B <- c(-1,-1,+1,+1)
C <- A*B
y <-c(4,5,12,13,8,20)
out <- lm(y~A*B*C)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B", "C")
A <- c(-1,+1,-1,+1)
B <- c(-1,-1,+1,+1)
C <- A*B
y <-c(4,5,12,13,8,20)
out <- lm(y~A*B*C)
A <- c(-1,+1,-1,+1,0)
B <- c(-1,-1,+1,+1,0)
C <- c(+1,-1,-1,+1,0)
y <-c(80,86,82,89,84)
out <- lm(y~ A*B*C)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B", "C")
A <- c(-1,+1,-1,+1,0)
B <- c(-1,-1,+1,+1,0)
C <- c(+1,-1,-1,+1,0)
y <-c(93,96,94,79,95)
out <- lm(y~ A*B*C)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B", "C")
A <- c(-1,+1,-1,+1,0)
B <- c(-1,-1,+1,+1,0)
#C <- c(+1,-1,-1,+1,0)
y <-c(93,96,94,79,95)
out <- lm(y~ A*B)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B")
A <- c(-1,-1,+1,+1,0)
B <- c(-1,+1,-1,+1,0)
#C <- c(+1,-1,-1,+1,0)
y <-c(93,96,94,79,95)
out <- lm(y~ A*B)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B")
A <- c(-1,-1,+1,+1,0)
B <- c(-1,+1,-1,+1,0)
#C <- c(+1,-1,-1,+1,0)
y <-c(93,96,94,79,95)
out <- lm(y~ A*B)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
D <- c(0, -1, +1, -1, +1, 0, 0, +1.41, 0, -1.41, 0)
T <- c(0, -1, -1, +1, +1, 0, -1.41, 0, 1.41, 0, 0)
y <- c(60, 49, 30, 62, 50, 56, 26, 40, 63, 57, 62)
out <- lm(y~ A*B)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "A", "B")
D <- c(0, -1, +1, -1, +1, 0, 0, +1.41, 0, -1.41, 0)
T <- c(0, -1, -1, +1, +1, 0, -1.41, 0, 1.41, 0, 0)
y <- c(60, 49, 30, 62, 50, 56, 26, 40, 63, 57, 62)
out <- lm(y~ D*T)
#outquad <- lm (y ~ S + I(S^2) )
summary(out)
#summary(outquad)
library(pid)
contourPlot(out, "D", "T")
rm(list = ls())   # clear the workspace of all prior variables
P <- c(   -1,  +1,  -1,  +1,0)
T <- c(   -1,  -1,  +1,  +1,0)
y <- c(4,9.5,5,5.5,8)
mod.base.1 <- lm(y ~ P*T)
summary(mod.base.1)
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "P", "T")
rm(list = ls())   # clear the workspace of all prior variables
M <- c(   -1,  +1,  -1,  +1,0,0,+1.41,0,-1.41)
H <- c(   -1,  -1,  +1,  +1,0,-1.41,0,+1.41,0)
y <- c(4,9.5,5,5.5,8,8,8,4,2)
mod.base.1 <- lm(y ~ M*H)
summary(mod.base.1)
# You will need the PID package to run this code.
# Run the following command once, then you can comment this out again
#install.packages("pid")
# Load the PID package in R.
library(pid)
contourPlot(mod.base.1, "M", "H")
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
head(poll)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
bye()
swirl()
library("swirl")
swirl()
boxplot(pm25~region,pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25,col="green")
hist((subset(pollution, region == "east"))$pm25,col="green")
hist(subset(pollution, region == "east")$pm25,col="green")
hist(subset(pollution, region == "west")$pm25,col="green")
plot(pollution)
with(pollution, plot(latitude,pm25))
abline(h=12)
abline(h=12, lwd =2, lty = 2)
plot(pollution$latitude,ppm,col =pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution$region==west)
west<-subset(pollution$region=="west
"")
west<-subset(pollution$region=="west")
west<-subset(pollution$region=="west")
west<-subset(pollution, region=="west")
plot(west$latitude,west$pm25,main = "west")
plot(west$latitude,west$pm25,main = "West")
plot(east$latitude,east$pm25,main = "East")
bye()
x<-c(1,2,4,0)
y<-c(0.5,1,2,0)
lm(y~x)
c(1:10)
x<-c(1:10)
y<-c(-890,-1411,-1560,-2220,-2091,-2878,-3537,-3268,-3920,-4163,-5471,-5157)
lm(y~x)
y<-c(-890,-1411,-1560,-2220,-2091,-2878,-3537,-3268,-3920,-4163,-5471,-5157)
y<-c(-890,-1411,-1560,-2220,-2091,-2878,-3537,-3268,-392,-4163,-5471,-5157)
length()
length(y)
swirl()
?Devices
with(faithful,plot())
with(faithful,plot
with(faithful,plot)
with(faithful,plot)
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.copy(png,file set = "geyserplot.png")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
swirl()
library("swirl")
swirl()
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality, col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,airquality, pch=8,col="red",main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),airquality,layout = c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout = c(5,1))
p<-xyplot(Ozone~Wind,airquality)
p
names(p)
mynames[full]
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local =TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local =TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut, data=diamonds,strip=FALSE,pch=20,xlab = mylab,ylab = myylab,main="mymain")
xyplot(price~carat|color*cut, data=diamonds,strip=FALSE,pch=20,xlab = myxlab,ylab = myylab,main="mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
library("swirl")
swirl()
qplot(displ,hwy,data=mpg,"point", "smooth")
qplot(displ,hwy, data = mpg, geom = c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg,displ,hwy)
g <- ggplot(mpg,displ~hwy)
g <- ggplot(mpg,aes(displ,hwy))
g
summary(g)
g+geom_point()
bye()
library(swirl)
library(swirl)
swirl()
swirl()
cmat
points(cx,cy)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist
mdist(x,y,cx,cy)
distTmp
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library("swirl")
swirl()
mplclust
myplclust
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12],maxCon)
mdist<-dist(c(sub1[,10:12],maxCon))
mdist<-dist(sub1[,c(10:12,maxCon))
mdist<-dist(sub1[,c(10:12,maxCon)
mdist<-dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity) )
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=2)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
install.packages("dplyr")
library("dplyr")
install.packages("dply")
install.packages("dplyr")
install.packages("lubidate")
install.packages("data.table")
install.packages("lattic")
install.packages("lattice")
install.packages("tibble")
library("dplyr")
library("lubridate")
library("data.table")
library("tibble")
library("ggplot2")
library("lattice")
install.packages("ggplot2")
library("dplyr")
library("lubridate")
library("data.table")
library("tibble")
library("ggplot2")
library("lattice")
install.packages("lubridate")
install.packages("lubridate")
library("dplyr")
library("lubridate")
library("data.table")
library("tibble")
library("ggplot2")
library("lattice")
setwd("C:/Users/Jigar Patel/Desktop/Coursera/John Hopkins Specialization/5_Reproducible Research/RR_Project w2")
