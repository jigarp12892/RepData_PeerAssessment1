dim(pollution)
summary(pm25)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, color = "blue")
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks = 100)
rug(ppm)
hist(ppm, col="green")
hist(ppm, col="green", v = 12, lwd =2)
abline(v = 12, lwd = 2)
abline(v = median(ppm),col = "magenta" lwd = 4)
abline(v = (median(ppm)),col = "magenta", lwd = 4)
abline(v = median(ppm),col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main = "Number of counties in each region")
barplot(reg,col="wheat",main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col + "red")
boxplot(pm25~region, data = pollution, col = "red")
bye()
swirl()
library("swirl")
swirl()
bye()
swirl()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income,data = state,c(4,1))
xyplot(Life.Exp~Income| region ,data = state,c(4,1))
xyplot(Life.Exp~Income| region, data = state,layout=c(4,1))
xyplot(Life.Exp~Income| region, data = state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab = "Month", ylab = "Ozone (ppb)", col.axis= "blue", col.lab ="red")
title("Ozone and Wind in New York City")
bye()
library("swirl")
swirl()
with(airquality,plot())
with(airquality,plot
with(airquality,plot)
with(airquality,plot)
with(airquality,plot(Wind, Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
swirl()
library("swirl")
swirl()
bye
bye()
swirl()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
call(0,1,len=6)
seq(0,1,len=6)
pal(seq(0,1,len=6))
p1=colorRampPalette(c("red","blue"))
p1<-colorRampPalette(c("red","blue"))
p1(20)
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(20)
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?fun
?rgb
p3 <- colorRampPalette(c("blue","greem"), alpha=0.5)
p3 <- colorRampPalette(c("blue","green"), alpha=0.5)
p3(5)
rgb(0,0.5,0.5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5), alpha = 0.3)
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
cols=brewer.pal(3,"BuGn")
cols < -brewer.pal(3,"BuGn")
cols <-brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot("displ","hwy",mpg)
qplot("displ","hwy",data =mpg)
qplot(displ,hwy,data =mpg)
qplot(displ,hwy,data =mpg,col=drv)
qplot(displ,hwy,data =mpg,color=drv)
swirl()
qplot(displ,hwy,data =mpg,color=drv,geom=c("point", "smooth"))
qplot(y=hwy, data=mpg,color=drv)
myhigh
qplot(drv,hwy,data = mpg, geom ="boxplot")
qplot(drv,hwy,data = mpg, geom ="boxplot",color = "manufacturer")
qplot(drv,hwy,data = mpg, geom ="boxplot",color = manufacturer)
qplot(hwy, data =mpg,fill=drv)
qplot(displ,hwy,data=mpg,.~drv)
qplot(displ,hwy,data=mpg,~drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = .~drv, binwidth = 2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
library("swirl")
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds,binwidth=18497/30)
brk
counts
qplot(price, data=diamonds,binwidth=18497/30,fill=cut)
qplot(price, data=diamonds,geom = "density")
qplot(price, data=diamonds,geom = "density",color=cut)
library(shiny); runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
swirl()
qplot(carat,price)
qplot(carat,price,data=dataset)
swirl()
qplot(carat,price,data=dataset)
qplot(carat,price,data="dataset")
qplot(data=dataset,carat,price)
qplot
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,shape=cut,color=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth="lm")
qplot(carat,price,data=diamonds,color=cut)+geom_smooth="lm")
qplot(carat,price,data=diamonds,color=cut)+(geom_smooth="lm")
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds,aes(depth,price))
summarise(g)
summary(g)
geom_point(g,alpha=1/3)
geom_point(g,aes(alpha=1/3))
g<-g + geom_point(alpha=1/3)
g + geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,4),na.rm=TRUE )
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE )
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
plo<-xyplot(weight ~ Time | Diet, BodyWeight)
class(plo)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library("swirl")
swirl()
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(displ,hwy)
g<-ggplot(aes(displ,hwy))
g<-ggplot(aes(d
g<-ggplot(aes(d))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid()
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4,alpha=1/2)+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules")
g+geom_point(color="pink", size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(color=drv)+labs(title="Swirl Rules!")+labs("Displacement","Hwy Mileage")
g+geom_point(color=drv)+labs(title="Swirl Rules!")+labs("Displacement","Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs("Displacement","Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") +
labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv,size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm")
g + geom_point(aes(color = drv,size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv,size=2,alpha=1/2))+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
bye()
library("swirl")
swirl()
g+geom_point(color=drv)+theme_bw
g+geom_point(aes(color=drv))+theme_bw
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
swirl()
library("Swirl")
library("wwirl")
library("w\swirl")
library("swirl")
swirl()
plot(myx,myy,type="l",ylim = c)
plot(myx,myy,type="l",ylim = c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
ggplot(dataser,aes(x=displ,y=hyw, color=factor(year)))
ggplot(dataset,aes(x=displ,y=hyw, color=factor(year)))
ggplot(mpg,aes(x=displ,y=hyw, color=factor(year)))
ggplot(mpg,aes(x=displ,y=hwy, color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement,y=""Highway Mileage", title="Swirl Rules")
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement,y="Highway Mileage", title="Swirl Rules")
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules")
g+geom_point()+facet_grid(drv~cyl,margins =TRUE)+geom_smooth(method="lm", se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage", title="Swirl Rules!")
library("swirl")
swirl()
dist(dataFrame)
hc =hclust(distxy)
hc <-clust(distxy)
hc <-hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline (h=1.5,col="blue")
abline (h=4,col="blue")
abline (h=4,col="red")
abline (h=.44,col="red")
abline (h=.4,col="red")
5
abline (h=.05,col="red")
11
12
abline (h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
library("swirl")
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
diag
matu %*% diag  %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2
svd2$v{,1:2}
svd2$v[],1:2]
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
a1<- svd1$u[,1] %*%
a1<- svd1$u[,1]
a1<- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] * diag(svd1$d[1:2])) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] * diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library("swirl")
swirl()
dim(pm0)
head(pm0)
colnames(cnames)
print(cnames)
library(shiny); runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
install("reaxl")
install("reafxl")
install("readxl")
library.install("readxl")
install.packages("readxl")
install.packages(c("readxl","shinydashboard","ggplot2","dplyr","ggthemes","plotly")
install.packages(c("readxl","shinydashboard","ggplot2","dplyr","ggthemes","plotly"))
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
library(shiny); runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
library(shiny); runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
runApp('X:/MFG/Machine Tech/Tool Life Management operator input/ToolDash.R')
#6a aggregating data2 to get total steps each day#
aggregated_totalsteps2 <- aggregate(x =data2[c("steps","interval")], by = list(data2$date),FUN = sum)
library("dplyr")
library("lubridate")
library("data.table")
library("tibble")
#1a reading the data file using fread and tbl_df, also cleaning up the date column simultaneously using mutate#
data<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
#1b filtering out NA values#
data <- filter(data, steps != 'NA')
library("ggplot2")
#2a aggregating data to get total steps each day#
aggregated_totalsteps <- aggregate(x =data[c("steps","interval")], by = list(data$date),FUN = sum)
#2b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
#3a mean steps#
Meansteps <- mean(aggregated_totalsteps$steps)
#3b median steps#
Mediansteps <- median(aggregated_totalsteps$steps)
#4a aggregrating data by interval for time series plot#
Byinterval <- aggregate(data$steps, by = list(data$interval), mean)
colnames(Byinterval)<-c("intervalID", "Mean steps")
plot(Byinterval$intervalID,Byinterval$`Mean steps`,type="l",
xlab="5-Minute Interval",ylab="Mean Steps Taken",
main="Steps during the Day")
'Interval with most activity'
Byinterval$intervalID[which.max(Byinterval$`Mean steps`)]
'Let us re-read the raw data'
'How many missing values'
data2<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
sum(!complete.cases(data2))
'Replacing missing values with mean from that
specific interval (Ex: Missing value in interval
5 replaced by mean step value in interval 5'
setwd("~/R/RR-project1")
library("dplyr")
library("lubridate")
library("data.table")
library("tibble")
library("ggplot2")
#1a reading the data file using fread and tbl_df, also cleaning up the date column simultaneously using mutate#
data<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
#1b filtering out NA values#
data <- filter(data, steps != 'NA')
#2a aggregating data to get total steps each day#
aggregated_totalsteps <- aggregate(x =data[c("steps","interval")], by = list(data$date),FUN = sum)
#2b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
#3a mean steps#
Meansteps <- mean(aggregated_totalsteps$steps)
#3b median steps#
Mediansteps <- median(aggregated_totalsteps$steps)
#4a aggregrating data by interval for time series plot#
Byinterval <- aggregate(data$steps, by = list(data$interval), mean)
colnames(Byinterval)<-c("intervalID", "Mean steps")
plot(Byinterval$intervalID,Byinterval$`Mean steps`,type="l",
xlab="5-Minute Interval",ylab="Mean Steps Taken",
main="Steps during the Day")
'Interval with most activity'
'Let us re-read the raw data'
data2<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
imputed <- rbind(data2[complete.cases(data2), ], select(updated, steps, date, interval))
'no more NA values'
sum(!complete.cases(imputed))
#6a aggregating data2 to get total steps each day#
aggregated_totalsteps2 <- aggregate(x =data2[c("steps","interval")], by = list(data2$date),FUN = sum)
#6b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps2$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
updated <- merge(x=incomplete, y=summary, by="interval", all.x=T);
'How many missing values'
Byinterval$intervalID[which.max(Byinterval$`Mean steps`)]
'Replacing missing values with mean from that
specific interval (Ex: Missing value in interval
5 replaced by mean step value in interval 5'
updated$steps <- updated$mean;
sum(!complete.cases(data2))
incomplete <- data2[!complete.cases(data2),];
summary <- data2[complete.cases(data2), ] %>% group_by(interval) %>% summarise(mean=mean(steps));
#1a reading the data file using fread and tbl_df, also cleaning up the date column simultaneously using mutate#
data<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
#2a aggregating data to get total steps each day#
aggregated_totalsteps <- aggregate(x =data[c("steps","interval")], by = list(data$date),FUN = sum)
#2b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
#3a mean steps#
Meansteps <- mean(aggregated_totalsteps$steps)
#3b median steps#
Mediansteps <- median(aggregated_totalsteps$steps)
#4a aggregrating data by interval for time series plot#
Byinterval <- aggregate(data$steps, by = list(data$interval), mean)
colnames(Byinterval)<-c("intervalID", "Mean steps")
#1a reading the data file using fread and tbl_df, also cleaning up the date column simultaneously using mutate#
data<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
#2a aggregating data to get total steps each day#
aggregated_totalsteps <- aggregate(x =data[c("steps","interval")], by = list(data$date),FUN = sum)
#2b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
#3a mean steps#
Meansteps <- mean(aggregated_totalsteps$steps)
#3b median steps#
Mediansteps <- median(aggregated_totalsteps$steps)
#4a aggregrating data by interval for time series plot#
Byinterval <- aggregate(data$steps, by = list(data$interval), mean)
colnames(Byinterval)<-c("intervalID", "Mean steps")
plot(Byinterval$intervalID,Byinterval$`Mean steps`,type="l",
xlab="5-Minute Interval",ylab="Mean Steps Taken",
main="Steps during the Day")
#1a reading the data file using fread and tbl_df, also cleaning up the date column simultaneously using mutate#
rawdata<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
#1b filtering out NA values#
data <- filter(rawdata, steps != 'NA')
#2a aggregating data to get total steps each day#
aggregated_totalsteps <- aggregate(x =data[c("steps","interval")], by = list(data$date),FUN = sum)
#2b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
#3a mean steps#
Meansteps <- mean(aggregated_totalsteps$steps)
#3b median steps#
Mediansteps <- median(aggregated_totalsteps$steps)
#4a aggregrating data by interval for time series plot#
Byinterval <- aggregate(data$steps, by = list(data$interval), mean)
colnames(Byinterval)<-c("intervalID", "Mean steps")
plot(Byinterval$intervalID,Byinterval$`Mean steps`,type="l",
xlab="5-Minute Interval",ylab="Mean Steps Taken",
main="Steps during the Day")
'Interval with most activity'
Byinterval$intervalID[which.max(Byinterval$`Mean steps`)]
'Let us re-read the raw data'
data2<- tbl_df(fread("activity.csv", na.strings = "NA") ) %>%  mutate(date = ymd(date))
'How many missing values'
sum(!complete.cases(data2))
'Replacing missing values with mean from that
specific interval (Ex: Missing value in interval
5 replaced by mean step value in interval 5'
summary <- data2[complete.cases(data2), ] %>% group_by(interval) %>% summarise(mean=mean(steps));
incomplete <- data2[!complete.cases(data2),];
updated <- merge(x=incomplete, y=summary, by="interval", all.x=T);
updated$steps <- updated$mean;
imputed <- rbind(data2[complete.cases(data2), ], select(updated, steps, date, interval))
'no more NA values'
sum(!complete.cases(imputed))
#6a aggregating data2 to get total steps each day#
aggregated_totalsteps2 <- aggregate(x =imputed[c("steps","interval")], by = list(imputed$date),FUN = sum)
#6b creating histogram of total steps per day using qplot#
qplot(aggregated_totalsteps2$steps, geom="histogram",binwidth= 5000, main = "Histogram for Steps", xlab = "Total Steps Per Day")
